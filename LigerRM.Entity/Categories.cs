//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。  
//     技术支持：稻米(www.cnblogs.com/leoxie2011)
//     对此文件的更改可能会导致不正确的行为
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.Common;
using Liger.Common;
using Liger.Data;

namespace Liger.Model
{

	/// <summary>
	/// 实体类Categories
	/// </summary>
	[Serializable]
	public class Categories : Entity 
	{ 
		 public Categories() 
            : base("Categories") 
        { 

        }


		#region Model
		private int _CategoryID;
		private string _CategoryName;
		private string _Description;
	 
		/// <summary>
		/// Number automatically assigned to a new category.
		/// </summary>
		public int CategoryID
		{
			get{ return _CategoryID; }
			set
			{
				this.OnPropertyValueChange(_.CategoryID,_CategoryID,value);
				this._CategoryID = value;
			}
		}
		/// <summary>
		/// Name of food category.
		/// </summary>
		public string CategoryName
		{
			get{ return _CategoryName; }
			set
			{
				this.OnPropertyValueChange(_.CategoryName,_CategoryName,value);
				this._CategoryName = value;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		public string Description
		{
			get{ return _Description; }
			set
			{
				this.OnPropertyValueChange(_.Description,_Description,value);
				this._Description = value;
			}
		}
		#endregion

		#region Method
		/// <summary>
		/// 获取实体中的标识列
		/// </summary>
		public override Field GetIdentityField()
		{
			return _.CategoryID;
		}
		/// <summary>
		/// 获取实体中的主键列
		/// </summary>
		public override Field[] GetPrimaryKeyFields()
		{
			return new Field[] {
				_.CategoryID			};
		}
		/// <summary>
		/// 获取列信息
		/// </summary>
		public override Field[] GetFields()
		{
			return new Field[] {
				_.CategoryID,
				_.CategoryName,
				_.Description
			};
		}
		/// <summary>
		/// 获取值信息
		/// </summary>
		public override object[] GetValues()
		{
			return new object[] {
				_CategoryID,
				_CategoryName,
				_Description
			};
		} 
		/// <summary>
		/// 设置字段值
		/// </summary>
		public override void SetValue(string fieldName, object value)
        {
            switch (fieldName)
            { 
				case "CategoryID":
                    this._CategoryID = DataHelper.ConvertValue<int>(value);
                    break; 
				case "CategoryName":
                    this._CategoryName = DataHelper.ConvertValue<string>(value);
                    break; 
				case "Description":
                    this._Description = DataHelper.ConvertValue<string>(value);
                    break; 
            }
        }
		/// <summary>
		/// 获取字段值
		/// </summary>
        public override object GetValue(string fieldName)
        {
            switch (fieldName)
            { 
				case "CategoryID":
                    return this._CategoryID; 
				case "CategoryName":
                    return this._CategoryName; 
				case "Description":
                    return this._Description; 
				default :
                    return null;
            } 
        }



		#endregion

		#region _Field
		/// <summary>
		/// 字段信息
		/// </summary>
		public class _
		{
			/// <summary>
			/// * 
			/// </summary>
			public readonly static Field All = new Field("*","Categories");
 
			/// <summary>
			/// Number automatically assigned to a new category.
			/// </summary>
			public readonly static Field CategoryID = new Field("CategoryID","Categories","CategoryID");
			/// <summary>
			/// Name of food category.
			/// </summary>
			public readonly static Field CategoryName = new Field("CategoryName","Categories","CategoryName");
			/// <summary>
			/// 
			/// </summary>
			public readonly static Field Description = new Field("Description","Categories","Description");
		}
		#endregion

 
	}
}


