//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。  
//     技术支持：稻米(www.cnblogs.com/leoxie2011)
//     对此文件的更改可能会导致不正确的行为
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Specialized;
using System.Collections.Generic;  
using LigerRM.Common; 
using Liger.Model;
using Liger.Data;
using Liger.Common.Extensions;
using System.Linq;
using Liger.Data.Linq;
using SignetInternet_BusinessLayer;

namespace LigerRM.Service
{
    /// <summary>
    /// 组织架构 
    /// </summary>
    public class AjaxMemberManage
    {
        public static DbContext DB = DbHelper.Db;


		/// <summary>
		/// 获取 部门 
		/// </summary>
		public static AjaxResult GetDepartment(string ID)
        {
            return DB.GetEntity<CFDepartment>(CFDepartment._.DeptID == ID);
        } 
		/// <summary>
		/// 增加 部门 
		/// </summary>
        public static AjaxResult AddDepartment(NameValueCollection form)
        {
            var entity = new CFDepartment(); 
            entity.Load(form); 
            return DB.InsertEntity<CFDepartment>(entity);
        }
		/// <summary>
		/// 更新 部门 
		/// </summary>
        public static AjaxResult UpdateDepartment(NameValueCollection form)
        {
            var entity = DB.From<CFDepartment>().Where(CFDepartment._.DeptID == form["DeptID"]).ToFirst();
			entity.Attach();
            entity.Load(form);
            return DB.UpdateEntity<CFDepartment>(entity); 
        } 
		/// <summary>
		/// 删除 部门 
		/// </summary>
        public static AjaxResult RemoveDepartment(string ID)
        {
            return DB.DeleteEntity<CFDepartment>(ID);
        }
		/// <summary>
		/// 获取 收藏 
		/// </summary>
		public static AjaxResult GetFavorite(string ID)
        {
            return DB.GetEntity<CFFavorite>(CFFavorite._.FavoriteID == ID);
        } 
		/// <summary>
		/// 增加 收藏 
		/// </summary>
        public static AjaxResult AddFavorite(NameValueCollection form)
        {
            var entity = new CFFavorite(); 
            entity.Load(form); 
            return DB.InsertEntity<CFFavorite>(entity);
        }
		/// <summary>
		/// 更新 收藏 
		/// </summary>
        public static AjaxResult UpdateFavorite(NameValueCollection form)
        {
            var entity = DB.From<CFFavorite>().Where(CFFavorite._.FavoriteID == form["FavoriteID"]).ToFirst();
			entity.Attach();
            entity.Load(form);
            return DB.UpdateEntity<CFFavorite>(entity); 
        } 
		/// <summary>
		/// 删除 收藏 
		/// </summary>
        public static AjaxResult RemoveFavorite(string ID)
        {
            return DB.DeleteEntity<CFFavorite>(ID);
        }
		/// <summary>
		/// 获取 角色 
		/// </summary>
		public static AjaxResult GetRole(string ID)
        {
            return DB.GetEntity<CFRole>(CFRole._.RoleID == ID);
        } 
         
		/// <summary>
		/// 增加 角色 
		/// </summary>
        public static AjaxResult AddRole(NameValueCollection form)
        {
            var entity = new CFRole(); 
            entity.Load(form);
            SysLogHelper.AddLog(SysContext.CurrentUserName, "添加权限ID：" + entity.RoleName, "添加-权限");
            return DB.InsertEntity<CFRole>(entity);
        }
		/// <summary>
		/// 更新 角色 
		/// </summary>
        public static AjaxResult UpdateRole(NameValueCollection form)
        {
            var entity = DB.From<CFRole>().Where(CFRole._.RoleID == form["RoleID"]).ToFirst();
			entity.Attach();
            entity.Load(form);
            return DB.UpdateEntity<CFRole>(entity); 
        } 
		/// <summary>
		/// 删除 角色 
		/// </summary>
        public static AjaxResult RemoveRole(string ID)
        {
            return AjaxResult.Success();
            //SignetInternet_BusinessLayer.SignetHelper helper = new SignetInternet_BusinessLayer.SignetHelper();
            //if (helper.IsCodeInUsing("Role", ID))
            //{
            //    return AjaxResult.Error("该权限已经分配用户，无法删除！");
            //}
            //else
            //{
            //    SignetInternet_BusinessLayer.SysLogHelper.AddLog(SysContext.CurrentUserName, "删除权限ID：" + ID, "删除-权限");
            //    return DB.DeleteEntity<CFRole>(ID);
            //}
        }
		/// <summary>
		/// 获取 用户 
		/// </summary>
		public static AjaxResult GetUser(string ID)
        {
            return DB.GetEntity<CFUser>(CFUser._.UserID == ID);
        }


        /// <summary>
        /// 获取当前用户
        /// </summary>
        /// <returns></returns>
        public static AjaxResult GetCurrentUser()
        {
            return DB.GetEntity<CFUser>(CFUser._.UserID == SysContext.CurrentUserID);
        }


        /// <summary>
        /// 获取角色列表 以逗号隔开
        /// </summary>
        /// <param name="UserID"></param>
        /// <returns></returns>
        public static string GetRoleList(string UserID)
        {
            int userid = UserID.ToInt();

            var roleids = (from a in DB.Query<CFUserRole>()
                           where a.UserID == userid
                           select a.RoleID).ToArray();

            return String.Join(",", Array.ConvertAll<int, string>(roleids, c => c.ToStr()));

        }

        private static void SaveUserRole(string roleids,int userID)
        {
            DB.Delete<CFUserRole>(CFUserRole._.UserID == userID);

            if (string.IsNullOrEmpty(roleids)) return;
            var split = roleids.Split(',');
            int[] RoleIDList = Array.ConvertAll<string, int>(split, c => int.Parse(c));

            foreach (var roleid in RoleIDList)
            {
                DB.Insert<CFUserRole>(new CFUserRole()
                {
                    UserID = userID,
                    RoleID = roleid
                });
            }
        }

		/// <summary>
		/// 增加 用户 
		/// </summary>
        public static AjaxResult AddUser(NameValueCollection form)
        {
            try
            {
                DB.BeginTransaction();

                var entity = new CFUser();
                entity.Load(form);
                entity.LoginPassword = Encrypt.DESEncrypt(entity.LoginPassword);
                entity.UserID =  DB.Insert<CFUser>(entity);
                string roleid = form["RoleID"];
                SaveUserRole(roleid, entity.UserID);

                DB.CommitTransaction();
                DB.CloseTransaction();
                SignetInternet_BusinessLayer.SysLogHelper.AddLog(SysContext.CurrentUserName, "添加管理用户ID：" + entity.UserID, "添加-管理用户");
                return AjaxResult.Success("保存成功");
            }
            catch (Exception err)
            {
                DB.RollbackTransaction();
                DB.CloseTransaction();

                LogManager.WriteLog("Error", err.Message);
                return AjaxResult.Error("系统错误:" + err.Message);
            }  
        }
		/// <summary>
		/// 更新 用户 
		/// </summary>
        public static AjaxResult UpdateUser(NameValueCollection form)
        {

            try
            {
                DB.BeginTransaction();

                var entity = DB.From<CFUser>().Where(CFUser._.UserID == form["UserID"]).ToFirst();
                entity.Attach();

                entity.Load(form);
                entity.LoginPassword = Encrypt.DESEncrypt(entity.LoginPassword);
                DB.Update<CFUser>(entity); 
                string roleid = form["RoleID"];
                SaveUserRole(roleid, entity.UserID);

                DB.CommitTransaction();
                DB.CloseTransaction();
                return AjaxResult.Success("保存成功");
            }
            catch (Exception err)
            {
                DB.RollbackTransaction();
                DB.CloseTransaction();

                LogManager.WriteLog("Error", err.Message);
                return AjaxResult.Error("系统错误:" + err.Message);
            }   
        } 
		/// <summary>
		/// 删除 用户 
		/// </summary>
        public static AjaxResult RemoveUser(string ID)
        {
            return DB.DeleteEntity<CFUser>(ID);

        }
 
        
    }
}

