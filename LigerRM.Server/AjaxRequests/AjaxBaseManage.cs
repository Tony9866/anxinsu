//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。  
//     技术支持：稻米(www.cnblogs.com/leoxie2011)
//     对此文件的更改可能会导致不正确的行为
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Specialized;
using System.Collections.Generic;  
using LigerRM.Common; 
using Liger.Model;
using Liger.Data;
using SignetInternet_BusinessLayer;
using System.Web.Script.Serialization;
using System.Data; 

namespace LigerRM.Service
{
    /// <summary>
    /// 基础信息管理 
    /// </summary>
    public class AjaxBaseManage
    {
        public static DbContext DB = DbHelper.Db;


		/// <summary>
		/// 获取 类别 
		/// </summary>
		public static AjaxResult GetCategories(string ID)
        {
            return DB.GetEntity<Categories>(Categories._.CategoryID == ID);
        } 
		/// <summary>
		/// 增加 类别 
		/// </summary>
        public static AjaxResult AddCategories(NameValueCollection form)
        {
            var entity = new Categories(); 
            entity.Load(form); 
            return DB.InsertEntity<Categories>(entity);
        }
		/// <summary>
		/// 更新 类别 
		/// </summary>
        public static AjaxResult UpdateCategories(NameValueCollection form)
        {
            var entity = DB.From<Categories>().Where(Categories._.CategoryID == form["CategoryID"]).ToFirst();
			entity.Attach();
            entity.Load(form);
            return DB.UpdateEntity<Categories>(entity); 
        } 
		/// <summary>
		/// 删除 类别 
		/// </summary>
        public static AjaxResult RemoveCategories(string ID)
        {
            return DB.DeleteEntity<Categories>(ID);
        }
		/// <summary>
		/// 获取 产品 
		/// </summary>
		public static AjaxResult GetProducts(string ID)
        {
            return DB.GetEntity<Products>(Products._.ProductID == ID);
        } 
		/// <summary>
		/// 增加 产品 
		/// </summary>
        public static AjaxResult AddProducts(NameValueCollection form)
        {
            var entity = new Products(); 
            entity.Load(form); 
            return DB.InsertEntity<Products>(entity);
        }
		/// <summary>
		/// 更新 产品 
		/// </summary>
        public static AjaxResult UpdateProducts(NameValueCollection form)
        {
            var entity = DB.From<Products>().Where(Products._.ProductID == form["ProductID"]).ToFirst();
			entity.Attach();
            entity.Load(form);
            return DB.UpdateEntity<Products>(entity); 
        } 
		/// <summary>
		/// 删除 产品 
		/// </summary>
        public static AjaxResult RemoveProducts(string ID)
        {
            return DB.DeleteEntity<Products>(ID);
        }
		/// <summary>
		/// 获取 供应商 
		/// </summary>
		public static AjaxResult GetSuppliers(string ID)
        {
            return DB.GetEntity<Suppliers>(Suppliers._.SupplierID == ID);
        } 
		/// <summary>
		/// 增加 供应商 
		/// </summary>
        public static AjaxResult AddSuppliers(NameValueCollection form)
        {
            var entity = new Suppliers(); 
            entity.Load(form); 
            return DB.InsertEntity<Suppliers>(entity);
        }
		/// <summary>
		/// 更新 供应商 
		/// </summary>
        public static AjaxResult UpdateSuppliers(NameValueCollection form)
        {
            var entity = DB.From<Suppliers>().Where(Suppliers._.SupplierID == form["SupplierID"]).ToFirst();
			entity.Attach();
            entity.Load(form);
            return DB.UpdateEntity<Suppliers>(entity); 
        } 
		/// <summary>
		/// 删除 供应商 
		/// </summary>
        public static AjaxResult RemoveSuppliers(string ID)
        {
            return DB.DeleteEntity<Suppliers>(ID);
        }
		/// <summary>
		/// 获取 员工 
		/// </summary>
		public static AjaxResult GetEmployees(string ID)
        {
            return DB.GetEntity<Employees>(Employees._.EmployeeID == ID);
        } 
		/// <summary>
		/// 增加 员工 
		/// </summary>
        public static AjaxResult AddEmployees(NameValueCollection form)
        {
            var entity = new Employees(); 
            entity.Load(form); 
            return DB.InsertEntity<Employees>(entity);
        }
		/// <summary>
		/// 更新 员工 
		/// </summary>
        public static AjaxResult UpdateEmployees(NameValueCollection form)
        {
            var entity = DB.From<Employees>().Where(Employees._.EmployeeID == form["EmployeeID"]).ToFirst();
			entity.Attach();
            entity.Load(form);
            return DB.UpdateEntity<Employees>(entity); 
        } 
		/// <summary>
		/// 删除 员工 
		/// </summary>
        public static AjaxResult RemoveEmployees(string ID)
        {
            return DB.DeleteEntity<Employees>(ID);
        }

        #region Register

        //public static AjaxResult RemoveRegister(string ID)
        //{
        //    try
        //    {
        //        SignetBaseInfoManager manager = new SignetBaseInfoManager();
        //        SignetHelper helper = new SignetHelper();
        //        if (helper.IsExistsRegister(ID))
        //        {
        //            return AjaxResult.Error("此区域编码已在使用中，无法删除！");
        //        }
        //        else
        //        {
        //            manager.DeleteRegister(ID);
        //            SysLogHelper.AddLog(SysContext.CurrentUserName, "删除登记区域ID：" + ID, "删除-登记区域");
        //            return AjaxResult.Success();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return AjaxResult.Error(ex.Message);
        //    }
        //}

        //public static AjaxResult AddRegister(string ID,string Name,string Manager,string Address,string Phone)
        //{
        //    try
        //    {
        //        SignetBaseInfoManager manager = new SignetBaseInfoManager();
        //        if (manager.ExistsRegister(ID))
        //        {
        //            return AjaxResult.Error("此备案区域编号已经存在，请重新输入！");
        //        }
        //        else
        //        {
        //            manager.AddRegister(ID, Name, Manager, Address, Phone, string.Empty, string.Empty);
        //            SysLogHelper.AddLog(SysContext.CurrentUserName, "添加登记区域ID：" + ID, "添加-登记区域");
        //            return AjaxResult.Success();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return AjaxResult.Error(ex.Message);
        //    }
        //}

        //public static AjaxResult UpdateRegister(string ID, string Name, string Manager, string Address, string Phone)
        //{
        //    try
        //    {
        //        SignetBaseInfoManager manager = new SignetBaseInfoManager();
        //            manager.UpdateRegisters(ID, Name, Manager, Address, Phone, string.Empty, string.Empty);
        //            return AjaxResult.Success();
        //    }
        //    catch (Exception ex)
        //    {
        //        return AjaxResult.Error(ex.Message);
        //    }
        //}

        #endregion

        #region General Code
        public static AjaxResult RemoveGeneralCode(string group,string ID)
        {
            try
            {
                SignetHelper helper = new SignetHelper();
                if (helper.IsCodeInUsing(group, ID))
                {
                    return AjaxResult.Error("该编码已在使用中，无法进行删除！");
                }
                else
                {
                    SignetBaseInfoManager manager = new SignetBaseInfoManager();
                    manager.DeleteGeneralCode(group, ID);
                    SysLogHelper.AddLog(SysContext.CurrentUserName, "删除通用数据（"+group+"）ID：" + ID, "删除-通用数据");
                    return AjaxResult.Success();
                }
            }
            catch (Exception ex)
            {
                return AjaxResult.Error(ex.Message);
            }
        }

        public static AjaxResult AddGeneralCode(string group,string id, string name, string status)
        {
            try
            {
                SignetBaseInfoManager manager = new SignetBaseInfoManager();
                if (manager.ExistsGeneralCode(group,name))
                {
                    return AjaxResult.Error("此通用数据已经存在，请重新输入！");
                }
                else
                {
                    manager.AddGeneralCode(group, id, name);
                    SysLogHelper.AddLog(SysContext.CurrentUserName, "添加通用数据（"+group+"）ID：" + id, "添加-通用数据");
                    return AjaxResult.Success();
                }
            }
            catch (Exception ex)
            {
                return AjaxResult.Error(ex.Message);
            }
        }

        public static AjaxResult UpdateGeneralCode(string group, string id, string name, string status)
        {
            try
            {
                SignetBaseInfoManager manager = new SignetBaseInfoManager();

                manager.UpdateGeneralCode(name, id, group, id);
                return AjaxResult.Success();
            }
            catch (Exception ex)
            {
                return AjaxResult.Error(ex.Message);
            }
        }
        #endregion

        #region Clear Data
        public static AjaxResult ClearData(string DataJSON)
        {
            try
            {
                SignetHelper helper = new SignetHelper();
                var data = new JavaScriptSerializer().Deserialize<List<Dictionary<string, object>>>(DataJSON);
                foreach (var item in data)
                {
                    string tablename = item["name"].ToString();
                    helper.DeleteData(tablename);
                }
                return AjaxResult.Success();
            }
            catch (Exception ex)
            {
                return AjaxResult.Error(ex.Message);
            }
        }
        #endregion

        #region Message Management
        public static AjaxResult RemoveMessage(string id)
        {
            try
            {
                MessageHelper helper = new MessageHelper();
                helper.DeleteMessage(id);
                return AjaxResult.Success();
            }
            catch (Exception ex)
            {
                return AjaxResult.Error(ex.Message);
            }
        }

        public static AjaxResult AddMessage(string title,string text,string reporter)
        {
            try
            {
                MessageHelper helper = new MessageHelper();
                helper.AddMessage(title,text,reporter,"");
                return AjaxResult.Success();
            }
            catch (Exception ex)
            {
                return AjaxResult.Error(ex.Message);
            }
        }

        public static AjaxResult UpdateMessage(string id,string title,string text)
        {
            try
            {
                MessageHelper helper = new MessageHelper();
                helper.UpdateMessage(title,text, id);
                return AjaxResult.Success();
            }
            catch (Exception ex)
            {
                return AjaxResult.Error(ex.Message);
            }
        }
        #endregion

        #region 区域信息

        /// <summary>
		/// 获取 区域信息 
		/// </summary>
		public static AjaxResult GetDistrict(string ID)
        {
            return DB.GetEntity<RentDistrict>(RentDistrict._.LDID == ID);
        }
        /// <summary>
        /// 增加 区域信息 
        /// </summary>
        public static AjaxResult AddDistrict(NameValueCollection form)
        {
            var entity = new RentDistrict();
            entity.Load(form);
            return DB.InsertEntity<RentDistrict>(entity);
        }
        /// <summary>
        /// 更新 区域信息 
        /// </summary>
        public static AjaxResult UpdateDistrict(NameValueCollection form)
        {
            var entity = DB.From<RentDistrict>().Where(RentDistrict._.LDID == form["LDID"]).ToFirst();
            entity.Attach();
            entity.Load(form);
            return DB.UpdateEntity<RentDistrict>(entity);
        }
        /// <summary>
        /// 删除 区域信息 
        /// </summary>
        public static AjaxResult RemoveDistrict(string ID)
        {
            return DB.DeleteEntity<RentDistrict>(ID);
        }
        #endregion

        #region 街道信息

        /// <summary>
        /// 获取 街道信息 
        /// </summary>
        public static AjaxResult GetStreet(string ID)
        {
            return DB.GetEntity<RentStreet>(RentStreet._.LSID == ID);
        }
        /// <summary>
        /// 增加 街道信息 
        /// </summary>
        public static AjaxResult AddStreet(NameValueCollection form)
        {
            var entity = new RentStreet();
            entity.Load(form);
            entity.LDName = form["DistrictName"];
            return DB.InsertEntity<RentStreet>(entity);
        }
        /// <summary>
        /// 更新 街道信息 
        /// </summary>
        public static AjaxResult UpdateStreet(NameValueCollection form)
        {
            var entity = DB.From<RentStreet>().Where(RentStreet._.LSID == form["LSID"]).ToFirst();
            entity.Attach();
            entity.Load(form);
            entity.LDName = form["DistrictName"];
            return DB.UpdateEntity<RentStreet>(entity);
        }
        /// <summary>
        /// 删除 街道信息 
        /// </summary>
        public static AjaxResult RemoveStreet(string ID)
        {
            return DB.DeleteEntity<RentStreet>(ID);
        }
        #endregion

        #region 社区信息

        /// <summary>
        /// 获取 社区信息 
        /// </summary>
        public static AjaxResult GetRoad(string ID)
        {
            return DB.GetEntity<RentRoad>(RentRoad._.LRID == ID);
        }
        /// <summary>
        /// 增加 社区信息 
        /// </summary>
        public static AjaxResult AddRoad(NameValueCollection form)
        {
            var entity = new RentRoad();
            entity.Load(form);
            entity.LDID = (form["PSID"].ToString());
            entity.LSName = form["StreetName"];
            entity.LDName = form["DistrictName"];
            entity.PSName = form["PoliceName"];
            return DB.InsertEntity<RentRoad>(entity);
        }
        /// <summary>
        /// 更新 社区信息 
        /// </summary>
        public static AjaxResult UpdateRoad(NameValueCollection form)
        {
            var entity = DB.From<RentRoad>().Where(RentRoad._.LRID == form["LRID"]).ToFirst();
            entity.Attach();
            entity.Load(form);
            entity.LDID = (form["PSID"].ToString());
            entity.LSName = form["StreetName"];
            entity.LDName = form["DistrictName"];
            entity.PSName = form["PoliceName"];
            return DB.UpdateEntity<RentRoad>(entity);
        }
        /// <summary>
        /// 删除 社区信息 
        /// </summary>
        public static AjaxResult RemoveRoad(string ID)
        {
            return DB.DeleteEntity<RentRoad>(ID);
        }
        #endregion

        #region 警局信息

        /// <summary>
        /// 获取 社区信息 
        /// </summary>
        public static AjaxResult GetPoliceStation(string ID)
        {
            return DB.GetEntity<RentPoliceStation>(RentPoliceStation._.PSID == ID);
        }
        /// <summary>
        /// 增加 警局信息 
        /// </summary>
        public static AjaxResult AddPoliceStation(NameValueCollection form)
        {
            var entity = new RentPoliceStation();
            entity.Load(form);
            entity.PSID = form["PSID"];
            if (string.IsNullOrEmpty(form["ParentID"])==true)
            {
                entity.ParentID = "";
                entity.ParentName = string.Empty;
            }
            else
            {
                entity.ParentName = form["ParentName"];
            }
            if (string.IsNullOrEmpty(form["PSCreatedDate"]) == true)
            {
                entity.PSCreatedDate = System.DateTime.Now;
            }
            if (string.IsNullOrEmpty(form["PSModifiedDate"]) == true)
            {
                entity.PSModifiedDate = System.DateTime.Now;
            }

            return DB.InsertEntity<RentPoliceStation>(entity);
        }
        /// <summary>
        /// 更新 警局信息 
        /// </summary>
        public static AjaxResult UpdatePoliceStation(NameValueCollection form)
        {
            var entity = DB.From<RentPoliceStation>().Where(RentPoliceStation._.PSID == form["PSID"]).ToFirst();
            entity.Attach();
            entity.Load(form);
            if (string.IsNullOrEmpty(form["ParentID"]) == true)
            {
                entity.ParentID = "";
                entity.ParentName = string.Empty;
            }
            else
            {
                entity.ParentName = form["ParentName"];
            }
            if (string.IsNullOrEmpty(form["PSCreatedDate"]) == true)
            {
                entity.PSCreatedDate = System.DateTime.Now;
            }
            if (string.IsNullOrEmpty(form["PSModifiedDate"]) == true)
            {
                entity.PSModifiedDate = System.DateTime.Now;
            }
            return DB.UpdateEntity<RentPoliceStation>(entity);
        }
        /// <summary>
        /// 删除 警局信息 
        /// </summary>
        public static AjaxResult RemovePoliceStation(string ID)
        {
            return DB.DeleteEntity<RentPoliceStation>(ID);
        }
        #endregion

        #region 房源删除
        public static AjaxResult RemoveRent(string ID)
        {
            RentInfoHelper helper = new RentInfoHelper();
            if (helper.IsExists(ID))
            {
                return AjaxResult.Error("该房源已经有租赁信息，无法删除！");
            }
            else
            {
                helper.DeleteCorporation(ID);
                SysLogHelper.AddLog(SysContext.CurrentUserName, "删除房源信息ID：" + ID, "删除-房源信息");
                return AjaxResult.Success();
            }
        }
        #endregion   

        public static AjaxResult RemoveUserArea(string DataJSON)
        {
            UserInfoHelper helper = new UserInfoHelper();
            var data = new JavaScriptSerializer().Deserialize<List<Dictionary<string, object>>>(DataJSON);
            foreach (var item in data)
            {

                helper.DeleteSignetRelationship(item["t_fun_guid"].ToString());
                
            }
            return AjaxResult.Success();
        }

        public static AjaxResult RemoveUserCommunity(string DataJSON)
        {
            UserInfoHelper helper = new UserInfoHelper();
            var data = new JavaScriptSerializer().Deserialize<List<Dictionary<string, object>>>(DataJSON);
            foreach (var item in data)
            {

                helper.DeleteCommunityRelationship(item["t_fun_guid"].ToString());

            }
            return AjaxResult.Success();
        }

        public static AjaxResult SetHouseStatus()
        {
            RentInfoHelper helper = new RentInfoHelper();
            string sql = "select * from v_RentHistory_view where RRAIsActive = 0 and RRAEndDate<'"+DateTime.Now.ToString("yyyy-MM-dd")+"' and isavailable='已租'";
            DataTable dt = helper.GetDataTable(sql);
            foreach (DataRow row in dt.Rows)
            { 
                sql = "update rent_rent set isavailable=0 where rentno='"+row["RentNO"].ToString()+"'";
                helper.ExcuteSql(sql);
                sql = "Update rent_rentAttribute set RRAIsActive=1 where RRAID=" + row["RRAID"].ToString();
                helper.ExcuteSql(sql);
            }
            return AjaxResult.Success();
        }
        //开锁操做
        public static AjaxResult UnLockDevice(string ID, string LockType)
        {
            if (LockType == "1")  //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                string ret = managerNew.openDoor(ID);
                Dictionary<string, object> returnInfo = new Dictionary<string, object>();
                returnInfo = JSONHelper.FromJson<Dictionary<string, object>>(ret);
                if (returnInfo["ret"].ToString() == "0")
                {
                    return AjaxResult.Success();
                }else {
                    return AjaxResult.Error("开锁失败！");
                }
            }
            else 
            {
                LockManager manager = new LockManager();
                string ret = manager.UnLockDevice(ID);
                if (ret.Substring(0, 1) == "0")
                    return AjaxResult.Success();
                else if (ret.Substring(0, 1) == "1")
                    return AjaxResult.Error("已执行开锁操作，但未成功！");
                else if (ret.Substring(0, 1) == "2")
                    return AjaxResult.Error("开锁超时！");
                else
                    return AjaxResult.Error("开锁失败！");
            }
        }

        public static AjaxResult AddIDCard(string ID, string LockType)
        {
            DateTime startDate = DateTime.Now.AddDays(-1);
            DateTime endDate = DateTime.Now.AddDays(1);
            if (LockType == "1")  //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                string returnDate = managerNew.GetPostInterface(ID, "Admin", "4", "", startDate.ToString(), endDate.ToString());
                Dictionary<string, object> returnInfo = new Dictionary<string, object>();
                returnInfo = JSONHelper.FromJson<Dictionary<string, object>>(returnDate);
                if (returnInfo["ret"].ToString() == "1")
                {
                    return AjaxResult.Error(returnInfo["msg"].ToString());
                }
            }
            else
            {
                LockManager manager = new LockManager();
                string ret = manager.UpdatePassengerInfoToDevice(ID, "", "", "", "", startDate.ToString("yyyyMMddHHmm").Substring(2, 10), endDate.ToString("yyyyMMddHHmm").Substring(2, 10), "7");
            }
            return AjaxResult.Success();
        }

        public static AjaxResult DeleteDevice(string ID)
        {
            LockManager manager = new LockManager();
            manager.DeleteLockDevice(ID);
            return AjaxResult.Success();
        }

        public static AjaxResult FreezeDevice(string ID)
        {
            LockManager manager = new LockManager();
            manager.FreezeICCard(ID);
            return AjaxResult.Success();
        }

        public static AjaxResult FreezeLock(string ID, string LockType)
        {
            if (LockType == "1") //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                string returnDate = managerNew.freezeAndUnfreezeLock(ID, "0");
                Dictionary<string, object> returnInfo = new Dictionary<string, object>();
                returnInfo = JSONHelper.FromJson<Dictionary<string, object>>(returnDate);
                if (returnInfo["ret"].ToString() == "1")
                {
                    return AjaxResult.Error(returnInfo["msg"].ToString());
                }
            }
            else
            {
                LockManager manager = new LockManager();
                manager.FreezeLock(ID);
            }
            return AjaxResult.Success();
            
        }

        public static AjaxResult UnFreezeLock(string ID, string LockType)
        {
            if (LockType == "1") //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                string returnDate = managerNew.freezeAndUnfreezeLock(ID, "1");
                Dictionary<string, object> returnInfo = new Dictionary<string, object>();
                returnInfo = JSONHelper.FromJson<Dictionary<string, object>>(returnDate);
                if (returnInfo["ret"].ToString() == "1")
                {
                    return AjaxResult.Error(returnInfo["msg"].ToString());
                }
            }
            else
            {
                LockManager manager = new LockManager();
                manager.UnFreezeLock(ID);
            }
            return AjaxResult.Success();
        }

        public static AjaxResult UnFreezeDevice(string ID)
        {
            LockManager manager = new LockManager();
            manager.UnFreezeICCard(ID);
            return AjaxResult.Success();
        }

        public static AjaxResult AddICCard(string id, string deviceId, string icCard, string startDate, string endDate, string locktype)
        {
            NewLockManager managerNew = new NewLockManager();
            string start = managerNew.GetDateTime(startDate).ToString();
            string end = managerNew.GetDateTime(endDate).ToString();
            if (locktype == "1") //新锁
            {
                string type = startDate == endDate ? "3" : "4";
                string returnDate = managerNew.GetPostInterface(deviceId, "Admin", type, icCard, start, end);
                Dictionary<string, object> returnInfo = new Dictionary<string, object>();
                returnInfo = JSONHelper.FromJson<Dictionary<string, object>>(returnDate);
                if (returnInfo["ret"].ToString() == "1")
                {
                    return AjaxResult.Error(returnInfo["msg"].ToString());
                }
            }
            else
            {
                LockManager manager = new LockManager();
                manager.AddICCard(deviceId, icCard, startDate, endDate);

                manager.UpdatePassengerInfoToDevice(deviceId, icCard, "", "", "", DateTime.Parse(start).ToString("yyyyMMddHHmm").Substring(2, 10), DateTime.Parse(end).ToString("yyyyMMddHHmm").Substring(2, 10), "1");
            }
          
            return AjaxResult.Success();
        }

        public static AjaxResult UpdateICCard(string id, string deviceId, string icCard, string startDate, string endDate, string locktype)
        {
            NewLockManager managerNew = new NewLockManager();
            string start = managerNew.GetDateTime(startDate).ToString();
            string end = managerNew.GetDateTime(endDate).ToString();
            if (locktype == "1")   //新锁
            {
                return AjaxResult.Error("暂时不支持修改，请先进行删除，在进行添加");
            }
            else
            {
                 LockManager manager = new LockManager();
                 manager.UpdateICCard(id,deviceId, icCard, startDate, endDate);

                 manager.UpdatePassengerInfoToDevice(deviceId, icCard, "", "", "", DateTime.Parse(start).ToString("yyyyMMddHHmm").Substring(2, 10), DateTime.Parse(end).ToString("yyyyMMddHHmm").Substring(2, 10), "1");
            }
           
            return AjaxResult.Success();
        }

        public static AjaxResult DeleteICCard(string id, string locktype)
        {
            if (locktype == "1") //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                managerNew.DeleteICCard(id);
            }
            else
            {
                LockManager manager = new LockManager();
                manager.DeleteICCard(id);
            }
            return AjaxResult.Success();
        }


        public static AjaxResult FreezeICCard(string id, string locktype)
        {
            if (locktype == "1") //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                managerNew.FreezeICCard(id);
            }
            else
            {
                LockManager manager = new LockManager();
                manager.FreezeICCard(id);
            }
            return AjaxResult.Success();
        }


        public static AjaxResult UnFreezeICCard(string id, string locktype)
        {
            if (locktype == "1") //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                managerNew.UnFreezeICCard(id);
            }
            else
            {
                LockManager manager = new LockManager();
                manager.UnFreezeICCard(id);
            }
            return AjaxResult.Success();
        }

        public static AjaxResult FreezePassword(string id, string locktype)
        {
            if (locktype == "1") //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                managerNew.FreezePassword(id);
            }
            else 
            {
                LockManager manager = new LockManager();
                manager.FreezePassword(id);
            }
            return AjaxResult.Success();
        }

        public static AjaxResult DeletePassword(string id, string locktype)
        {
            if (locktype == "1") //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                managerNew.DeletePassword(id);
            }
            else 
            {
                LockManager manager = new LockManager();
                manager.DeletePassword(id);
            }
            return AjaxResult.Success();
        }


        public static AjaxResult UnFreezePassword(string id, string locktype)
        {
            if (locktype == "1") //新锁
            {
                NewLockManager managerNew = new NewLockManager();
                managerNew.UnFreezePassword(id);
            }
            else
            {
                LockManager manager = new LockManager();
                manager.UnFreezePassword(id);
            }
            return AjaxResult.Success();
        }

        public static AjaxResult AddPassword(string id, string deviceId, string password, string startDate, string endDate, string locktype)
        {
            NewLockManager managerNew = new NewLockManager();
            string start = managerNew.GetDateTime(startDate).ToString();
            string end = managerNew.GetDateTime(endDate).ToString();
            if (locktype == "1") //新锁
            {
                string type = startDate == endDate ? "1" : "2";
                string returnDate = managerNew.GetPostInterface(deviceId, "Admin", type, password, start, end);
                Dictionary<string, object> returnInfo = new Dictionary<string, object>();
                returnInfo = JSONHelper.FromJson<Dictionary<string, object>>(returnDate);
                if (returnInfo["ret"].ToString() == "1")
                {
                    return AjaxResult.Error(returnInfo["msg"].ToString());
                }
            }
            else
            {
                LockManager manager = new LockManager();
                manager.AddPassword(deviceId, password, startDate, endDate);

                string ret = manager.UpdatePassengerInfoToDevice(deviceId, "", "", "", password, DateTime.Parse(start).ToString("yyyyMMddHHmm").Substring(2, 10), DateTime.Parse(end).ToString("yyyyMMddHHmm").Substring(2, 10), "3");
            
            }
            
            return AjaxResult.Success();
        }

        public static AjaxResult UpdatePassword(string id, string deviceId, string password, string startDate, string endDate, string locktype)
        {
            NewLockManager managerNew = new NewLockManager();
            string start = managerNew.GetDateTime(startDate).ToString();
            string end = managerNew.GetDateTime(endDate).ToString();
            if (locktype == "1") //新锁
            {
                return AjaxResult.Error("暂时不支持修改，请先进行删除，在进行添加");
            }
            else
            {
                LockManager manager = new LockManager();
                manager.UpdatePassword(id, deviceId, password, start, end);
            }
            return AjaxResult.Success();
        }

        public static AjaxResult GetElectronicData(string ID, string year, string month, string day, string ran)
        {
            Dictionary<string, string> ret = new Dictionary<string, string>();
            string sql = "select timeflag,year,month,day,hour,[minute],AVG(CAST(current_power as decimal)) as power from dbo.v_ElectricMeter_Date group by timeflag,[year],[MONTH],[DAY],[hour],[minute]  having [year]=" + year + " and [month]=" + month + " and [day]=" + day;

            DataTable dt = MySQLHelper.ExecuteDataset(MySQLHelper.SqlConnString, MySQLHelper.CreateCommand(sql)).Tables[0];
            List<List<double>> list = new List<List<double>>();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                List<double> temp = new List<double>();
                temp.Add(double.Parse(MilliTimeStamp(DateTime.Parse(DateTime.Parse(dt.Rows[i]["timeflag"].ToString()).ToString("yyyy-MM-dd HH:mm:ss"))).ToString()));
                temp.Add(double.Parse(dt.Rows[i]["power"].ToString()));
                list.Add(temp);
            }
            return AjaxResult.Success(JSONHelper.ToJson(list));
        }

        public static long MilliTimeStamp(DateTime TheDate)
        {
            DateTime d1 = new DateTime(1970, 1, 1);
            DateTime d2 = TheDate.AddHours(8).ToUniversalTime();
            TimeSpan ts = new TimeSpan(d2.Ticks - d1.Ticks);
            return (long)ts.TotalMilliseconds;
        }

        public static AjaxResult RemoveMonitorPerson(string ID)
        {
            MonitorPersonHelper helper = new MonitorPersonHelper();
            helper.DeleteMonitorPerson(ID);
            return AjaxResult.Success();
        }

        public static AjaxResult RemoveMonitorMotor(string ID)
        {
            MonitorPersonHelper helper = new MonitorPersonHelper();
            helper.DeleteMonitorMotor(ID);
            return AjaxResult.Success();
        }

        public static AjaxResult RemoveAlertInfo(string ID)
        {
            AlertInfoHelper helper = new AlertInfoHelper();
            helper.DeleteAlertInfo(ID);
            return AjaxResult.Success();
        }

        public static AjaxResult HandleAlertInfo(string id, string desc)
        {
            AlertInfoHelper helper = new AlertInfoHelper();
            helper.HandleAlertInfo(id, SysContext.CurrentUserID.ToString(), desc);
            return AjaxResult.Success();
        }

        public static AjaxResult CancelOrder(string rraId)
        { 
            string sql = "update Rent_RentAttribute set rrastatus='5',rraenddate='"+DateTime.Now.ToString()+"' where rraId="+rraId;
            MySQLHelper.ExecuteNonQuery(MySQLHelper.SqlConnString, MySQLHelper.CreateCommand(sql));
            return AjaxResult.Success();
        }
    }
}

